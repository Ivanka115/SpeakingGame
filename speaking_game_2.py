import pygame
import sys
import os
import requests
from PIL import Image, ImageDraw, ImageFont
import io
import json
import speech_recognition as sr
import sounddevice as sd
from scipy.io.wavfile import write
import tempfile
import random
import time
import numpy as np
import wave

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pygame
pygame.init()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞
WIDTH, HEIGHT = 1000, 700
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("–ì–æ–≤–æ—Ä–∏ –ü—Ä–∞–≤–∏–ª—å–Ω–æ - –ò–≥—Ä–∞ —Å –ü–µ—Ä–µ–≤–æ–¥–æ–º")

# –¶–≤–µ—Ç–∞
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
BLUE = (0, 0, 255)
RED = (255, 0, 0)
GREEN = (0, 128, 0)
DARK_BLUE = (30, 30, 50)
GOLD = (255, 215, 0)
LIGHT_BLUE = (100, 200, 255)

# –®—Ä–∏—Ñ—Ç—ã
font = pygame.font.SysFont('Arial', 24)
title_font = pygame.font.SysFont('Arial', 32, bold=True)
large_font = pygame.font.SysFont('Arial', 48, bold=True)

class SpeakingGame:
    def __init__(self):
        self.recognizer = sr.Recognizer()
        self.score = 0
        self.lives = 3
        self.streak = 0
        self.max_streak = 0
        self.session_stats = {
            "games_played": 0,
            "total_score": 0,
            "best_score": 0,
            "words_learned": set()
        }
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.load_stats()
        
        self.levels = {
            "1": {"name": "–ù–æ–≤–∏—á–æ–∫", "words": 5, "time_limit": 10, "multiplier": 1},
            "2": {"name": "–°—Ä–µ–¥–Ω–∏–π", "words": 8, "time_limit": 8, "multiplier": 1.5},
            "3": {"name": "–≠–∫—Å–ø–µ—Ä—Ç", "words": 12, "time_limit": 5, "multiplier": 2}
        }
        
        # –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–±–æ—Ä—ã —Å–ª–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        self.word_categories = {
            "1": {"name": "–ë–∞–∑–æ–≤—ã–µ —Å–ª–æ–≤–∞", "words": {
                "–∫–æ—Ç": "cat", "—Å–æ–±–∞–∫–∞": "dog", "–¥–æ–º": "house", "—Å–æ–ª–Ω—Ü–µ": "sun",
                "–≤–æ–¥–∞": "water", "–∫–Ω–∏–≥–∞": "book", "—Å—Ç–æ–ª": "table", "–æ–∫–Ω–æ": "window",
                "—è–±–ª–æ–∫–æ": "apple", "–º–∞—à–∏–Ω–∞": "car", "—Ä—É–∫–∞": "hand", "–Ω–æ–≥–∞": "leg"
            }, "images":{
                "–∫–æ—Ç": "cat.jpg",
                "—Å–æ–±–∞–∫–∞": "dog.webp",
                "–¥–æ–º": "house.jpg",
                "—Å–æ–ª–Ω—Ü–µ": "sun.jpg",
                "–≤–æ–¥–∞": "water.jpg", 
                "–∫–Ω–∏–≥–∞": "book.jpg", 
                "—Å—Ç–æ–ª": "table.jpg", 
                "–æ–∫–Ω–æ": "window.jpg",
                "—è–±–ª–æ–∫–æ": "apple.jpg", 
                "–º–∞—à–∏–Ω–∞": "car.jpg", 
                "—Ä—É–∫–∞": "hand.jpg", 
                "–Ω–æ–≥–∞": "leg.jpg"
            }},
            "2": {"name": "–ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏", "words": {
                "—Ö–ª–µ–±": "bread", "–º–æ–ª–æ–∫–æ": "milk", "—á–∞–π": "tea", "–∫–æ—Ñ–µ": "coffee",
                "—Å—É–ø": "soup", "—Å—ã—Ä": "cheese", "–º—è—Å–æ": "meat", "—Ä—ã–±–∞": "fish",
                "—Ñ—Ä—É–∫—Ç—ã": "fruits", "–æ–≤–æ—â–∏": "vegetables", "—Å–∞–ª–∞—Ç": "salad"
            }, "images":{
                "—Ö–ª–µ–±": "bread.jpg", 
                "–º–æ–ª–æ–∫–æ": "milk.jpg", 
                "—á–∞–π": "tea.jpg", 
                "–∫–æ—Ñ–µ": "coffee.jpg",
                "—Å—É–ø": "soup.jpg", 
                "—Å—ã—Ä": "cheese.jpg", 
                "–º—è—Å–æ": "meat.jpg", 
                "—Ä—ã–±–∞": "fish.jpg",
                "—Ñ—Ä—É–∫—Ç—ã": "fruits.jpg", 
                "–æ–≤–æ—â–∏": "vegetables.jpg", 
                "—Å–∞–ª–∞—Ç": "salad.jpg"
            }},
            "3": {"name": "–ü—Ä–∏—Ä–æ–¥–∞ –∏ –∂–∏–≤–æ—Ç–Ω—ã–µ", "words": {
                "–¥–µ—Ä–µ–≤–æ": "tree", "—Ü–≤–µ—Ç–æ–∫": "flower", "–ø—Ç–∏—Ü–∞": "bird", "–ª–µ—Å": "forest",
                "—Ä–µ–∫–∞": "river", "–º–æ—Ä–µ": "sea", "–≥–æ—Ä—ã": "mountains", "–Ω–µ–±–æ": "sky",
                "–∑–≤–µ–∑–¥–∞": "star", "–ª—É–Ω–∞": "moon", "–ø–æ–≥–æ–¥–∞": "weather"
            }, "images":{
                "–¥–µ—Ä–µ–≤–æ": "tree.jpg", 
                "—Ü–≤–µ—Ç–æ–∫": "flower.jpg", 
                "–ø—Ç–∏—Ü–∞": "bird.jpg", 
                "–ª–µ—Å": "forest.jpg",
                "—Ä–µ–∫–∞": "river.jpg", 
                "–º–æ—Ä–µ": "sea.jpg", 
                "–≥–æ—Ä—ã": "mountains.jpg", 
                "–Ω–µ–±–æ": "sky.jpg",
                "–∑–≤–µ–∑–¥–∞": "star.jpg", 
                "–ª—É–Ω–∞": "moon.jpg", 
                "–ø–æ–≥–æ–¥–∞": "weather.jpg"
            }},
            "4": {"name": "–ì–æ—Ä–æ–¥ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "words": {
                "–≥–æ—Ä–æ–¥": "city", "—É–ª–∏—Ü–∞": "street", "–ø–∞—Ä–∫": "park", "–º–∞–≥–∞–∑–∏–Ω": "shop",
                "—à–∫–æ–ª–∞": "school", "–±–æ–ª—å–Ω–∏—Ü–∞": "hospital", "–∞–≤—Ç–æ–±—É—Å": "bus",
                "–ø–æ–µ–∑–¥": "train", "—Å–∞–º–æ–ª–µ—Ç": "airplane", "–≤–µ–ª–æ—Å–∏–ø–µ–¥": "bicycle"
            }, "images": {
                "–≥–æ—Ä–æ–¥": "city.jpg", 
                "—É–ª–∏—Ü–∞": "street.jpg", 
                "–ø–∞—Ä–∫": "park.jpg", 
                "–º–∞–≥–∞–∑–∏–Ω": "shop.jpg",
                "—à–∫–æ–ª–∞": "school.jpg", 
                "–±–æ–ª—å–Ω–∏—Ü–∞": "hospital.jpg", 
                "–∞–≤—Ç–æ–±—É—Å": "bus.jpg",
                "–ø–æ–µ–∑–¥": "train.jpg", 
                "—Å–∞–º–æ–ª–µ—Ç": "airplane.jpg", 
                "–≤–µ–ª–æ—Å–∏–ø–µ–¥": "bicycle.jpg"
            }}
        }
        
        # –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        self.achievements = {
            "first_blood": {"name": "–ü–µ—Ä–≤–∞—è –∫—Ä–æ–≤—å", "desc": "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—É—é –∏–≥—Ä—É", "earned": False},
            "streak_master": {"name": "–ú–∞—Å—Ç–µ—Ä —Å–µ—Ä–∏–∏", "desc": "–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Å–µ—Ä–∏–∏ –∏–∑ 5 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤", "earned": False},
            "perfectionist": {"name": "–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç", "desc": "–ü—Ä–æ–π–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –±–µ–∑ –æ—à–∏–±–æ–∫", "earned": False},
            "vocabulary": {"name": "–°–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å", "desc": "–í—ã—É—á–∏—Ç–µ 20 —Å–ª–æ–≤", "earned": False},
            "speed_demon": {"name": "–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –¥–µ–º–æ–Ω", "desc": "–ü—Ä–æ–π–¥–∏—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "earned": False},
            "visual_learner": {"name": "–í–∏–∑—É–∞–ª", "desc": "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ–∂–∏–º —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏", "earned": False}
        }
        
        # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        self.current_state = "menu"
        self.current_word_index = 0
        self.current_words = []
        self.current_category = None
        self.current_level = None
        self.game_mode = None
        self.recording = False
        self.recording_start_time = 0
        self.recording_duration = 0
        self.last_result = None
        self.waiting_for_input = False
        self.current_image = None

    def create_unified_translation_image(self, russian_word, english_translation, category_id):
        """–°–æ–∑–¥–∞–µ—Ç –µ–¥–∏–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä—É—Å—Å–∫–∏–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º"""
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            width, height = 800, 600
            image = Image.new('RGB', (width, height), color=(30, 30, 50))
            draw = ImageDraw.Draw(image)
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤
            try:
                title_font = ImageFont.truetype("arial.ttf", 48)
                subtitle_font = ImageFont.truetype("arial.ttf", 36)
                info_font = ImageFont.truetype("arial.ttf", 20)
            except:
                title_font = ImageFont.load_default()
                subtitle_font = ImageFont.load_default()
                info_font = ImageFont.load_default()
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title_text = "üéì –û–ë–£–ß–ï–ù–ò–ï –ê–ù–ì–õ–ò–ô–°–ö–û–ú–£"
            title_bbox = draw.textbbox((0, 0), title_text, font=title_font)
            title_width = title_bbox[2] - title_bbox[0]
            title_x = (width - title_width) // 2
            draw.text((title_x, 30), title_text, fill=(255, 215, 0), font=title_font)
            
            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
            draw.line([(50, 100), (width-50, 100)], fill=(100, 100, 150), width=2)
            
            # –†—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ (–∫—Ä—É–ø–Ω–æ)
            russian_bbox = draw.textbbox((0, 0), russian_word.upper(), font=title_font)
            russian_width = russian_bbox[2] - russian_bbox[0]
            russian_x = (width - russian_width) // 2
            draw.text((russian_x, 150), russian_word.upper(), fill=(255, 255, 255), font=title_font)
            
            # –ú–µ—Ç–∫–∞ "–†—É—Å—Å–∫–∏–π"
            draw.text((width//2 - 100, 220), "–†–£–°–°–ö–ò–ô", fill=(100, 200, 100), font=info_font)
            
            # –°—Ç—Ä–µ–ª–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
            arrow_y = 280
            draw.polygon([(width//2-20, arrow_y), (width//2+20, arrow_y), (width//2, arrow_y+40)], fill=(100, 200, 255))
            draw.text((width//2-30, arrow_y+50), "–ü–ï–†–ï–í–û–î", fill=(100, 200, 255), font=info_font)
            
            # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ (–∫—Ä—É–ø–Ω–æ)
            english_bbox = draw.textbbox((0, 0), english_translation.upper(), font=title_font)
            english_width = english_bbox[2] - english_bbox[0]
            english_x = (width - english_width) // 2
            draw.text((english_x, 350), english_translation.upper(), fill=(100, 200, 255), font=title_font)
            
            # –ú–µ—Ç–∫–∞ "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"
            draw.text((width//2 - 100, 420), "–ê–ù–ì–õ–ò–ô–°–ö–ò–ô", fill=(100, 200, 255), font=info_font)
            
            # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            instruction = "üé§ –ü—Ä–æ–∏–∑–Ω–µ—Å–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –≤—Å–ª—É—Ö –ø–æ—Å–ª–µ —Å–∏–≥–Ω–∞–ª–∞!"
            instr_bbox = draw.textbbox((0, 0), instruction, font=info_font)
            instr_width = instr_bbox[2] - instr_bbox[0]
            instr_x = (width - instr_width) // 2
            draw.text((instr_x, 500), instruction, fill=(255, 150, 100), font=info_font)
            
            # –†–∞–º–∫–∞ –≤–æ–∫—Ä—É–≥ –≤—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            draw.rectangle([10, 10, width-10, height-10], outline=(100, 100, 150), width=3)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            filename = f"translation_{russian_word}.jpg"
            image.save(filename)
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Pygame
            pygame_image = pygame.image.load(filename)
            return pygame_image
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None

    def load_stats(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open("game_stats.json", "r", encoding="utf-8") as f:
                self.session_stats = json.load(f)
                self.session_stats["words_learned"] = set(self.session_stats.get("words_learned", []))
        except FileNotFoundError:
            pass

    def save_stats(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–∞–π–ª"""
        try:
            stats_to_save = self.session_stats.copy()
            stats_to_save["words_learned"] = list(stats_to_save["words_learned"])
            with open("game_stats.json", "w", encoding="utf-8") as f:
                json.dump(stats_to_save, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")

    def record_audio(self, duration=5, sample_rate=44100):
        """–ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
        print("\nüé§ –ó–∞–ø–∏—Å—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è... –ì–æ–≤–æ—Ä–∏—Ç–µ!")
        try:
            audio_data = sd.rec(int(duration * sample_rate), samplerate=sample_rate, channels=1, dtype='int16')
            sd.wait()
            
            with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as tmp_file:
                write(tmp_file.name, sample_rate, audio_data)
                return tmp_file.name
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ: {e}")
            return None

    def recognize_speech(self, audio_file):
        """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∏–∑ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞"""
        if not audio_file:
            return None
            
        try:
            with sr.AudioFile(audio_file) as source:
                self.recognizer.adjust_for_ambient_noise(source, duration=0.5)
                audio = self.recognizer.record(source)
                text = self.recognizer.recognize_google(audio, language='en-US')
                return text.lower()
        except sr.UnknownValueError:
            return None
        except sr.RequestError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
            return None

    def get_word_list(self, category_id, level):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —É—Ä–æ–≤–Ω—è"""
        category = self.word_categories[category_id]
        all_words = list(category["words"].keys())
        return random.sample(all_words, self.levels[level]["words"])

    def analyze_pronunciation(self, audio_file, correct_word):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è"""
        try:
            with wave.open(audio_file, 'rb') as wav_file:
                frames = wav_file.getnframes()
                rate = wav_file.getframerate()
                duration = frames / float(rate)
                
                signal = wav_file.readframes(frames)
                audio_data = np.frombuffer(signal, dtype=np.int16)
                volume = np.sqrt(np.mean(audio_data**2))
                
                feedback = []
                
                if duration < 0.5:
                    feedback.append("üó£Ô∏è –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ")
                elif duration > 3.0:
                    feedback.append("üó£Ô∏è –°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ")
                else:
                    feedback.append("üó£Ô∏è –•–æ—Ä–æ—à–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
                
                if volume < 1000:
                    feedback.append("üîà –°–ª–∏—à–∫–æ–º —Ç–∏—Ö–æ")
                elif volume > 10000:
                    feedback.append("üîä –°–ª–∏—à–∫–æ–º –≥—Ä–æ–º–∫–æ")
                else:
                    feedback.append("üîä –•–æ—Ä–æ—à–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å")
                
                return feedback
        except:
            return ["üîß –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"]

    def check_achievements(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–¥–∞—á–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        new_achievements = []
        
        if not self.achievements["first_blood"]["earned"] and self.session_stats["games_played"] > 0:
            self.achievements["first_blood"]["earned"] = True
            new_achievements.append("first_blood")
        
        if not self.achievements["streak_master"]["earned"] and self.streak >= 5:
            self.achievements["streak_master"]["earned"] = True
            new_achievements.append("streak_master")
        
        if not self.achievements["vocabulary"]["earned"] and len(self.session_stats["words_learned"]) >= 20:
            self.achievements["vocabulary"]["earned"] = True
            new_achievements.append("vocabulary")
        
        return new_achievements

    def start_game(self, category_id, level_id, game_mode):
        """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã"""
        self.current_category = category_id
        self.current_level = level_id
        self.game_mode = game_mode
        self.current_words = self.get_word_list(category_id, level_id)
        self.current_word_index = 0
        self.score = 0
        self.streak = 0
        self.lives = 3 if game_mode == "1" else 999
        self.current_state = "game"
        self.session_stats["games_played"] += 1
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if game_mode == "3" and self.current_words:
            first_word = self.current_words[0]
            english_translation = self.word_categories[category_id]["words"][first_word]
            self.current_image = self.create_unified_translation_image(first_word, english_translation, category_id)

    def draw_menu(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        screen.fill(DARK_BLUE)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = title_font.render("üéì –ì–û–í–û–†–ò –ü–†–ê–í–ò–õ–¨–ù–û", True, GOLD)
        subtitle = font.render("–£—á–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Å –ø–æ–º–æ—â—å—é —Ä–µ—á–∏", True, LIGHT_BLUE)
        screen.blit(title, (WIDTH//2 - title.get_width()//2, 50))
        screen.blit(subtitle, (WIDTH//2 - subtitle.get_width()//2, 100))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_y = 150
        stats_text = [
            f"üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {self.session_stats['games_played']}",
            f"üèÜ –õ—É—á—à–∏–π —Å—á–µ—Ç: {self.session_stats['best_score']}",
            f"üìö –°–ª–æ–≤ –≤—ã—É—á–µ–Ω–æ: {len(self.session_stats['words_learned'])}"
        ]
        
        for text in stats_text:
            stat_surface = font.render(text, True, WHITE)
            screen.blit(stat_surface, (WIDTH//2 - stat_surface.get_width()//2, stats_y))
            stats_y += 40
        
        # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        cat_y = 300
        cat_title = font.render("üìö –í–´–ë–ï–†–ò–¢–ï –ö–ê–¢–ï–ì–û–†–ò–Æ –°–õ–û–í:", True, WHITE)
        screen.blit(cat_title, (WIDTH//2 - cat_title.get_width()//2, cat_y))
        cat_y += 40
        
        for key, category in self.word_categories.items():
            image_info = f" üñºÔ∏è({len(category.get('images', {}))} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)"
            cat_text = font.render(f"{key}. {category['name']} ({len(category['words'])} —Å–ª–æ–≤){image_info}", True, LIGHT_BLUE)
            screen.blit(cat_text, (WIDTH//2 - cat_text.get_width()//2, cat_y))
            cat_y += 30
        
        # –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è
        level_y = 450
        level_title = font.render("üéöÔ∏è –í–´–ë–ï–†–ò–¢–ï –£–†–û–í–ï–ù–¨ –°–õ–û–ñ–ù–û–°–¢–ò:", True, WHITE)
        screen.blit(level_title, (WIDTH//2 - level_title.get_width()//2, level_y))
        level_y += 40
        
        for key, level in self.levels.items():
            level_text = font.render(f"{key}. {level['name']} ({level['words']} —Å–ª–æ–≤, {level['time_limit']} —Å–µ–∫)", True, LIGHT_BLUE)
            screen.blit(level_text, (WIDTH//2 - level_text.get_width()//2, level_y))
            level_y += 30
        
        # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
        mode_y = 550
        mode_title = font.render("üéÆ –í–´–ë–ï–†–ò–¢–ï –†–ï–ñ–ò–ú –ò–ì–†–´:", True, WHITE)
        screen.blit(mode_title, (WIDTH//2 - mode_title.get_width()//2, mode_y))
        mode_y += 40
        
        modes = [
            "1. üéØ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º (—Å –∂–∏–∑–Ω—è–º–∏)",
            "2. üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π —Ä–µ–∂–∏–º (–±–µ–∑ –∂–∏–∑–Ω–µ–π)",
            "3. üñºÔ∏è –í–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º (—Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)"
        ]
        
        for mode in modes:
            mode_surface = font.render(mode, True, LIGHT_BLUE)
            screen.blit(mode_surface, (WIDTH//2 - mode_surface.get_width()//2, mode_y))
            mode_y += 30
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        instruction = font.render("–ù–∞–∂–º–∏—Ç–µ —Ü–∏—Ñ—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞, ESC –¥–ª—è –≤—ã—Ö–æ–¥–∞", True, WHITE)
        screen.blit(instruction, (WIDTH//2 - instruction.get_width()//2, HEIGHT - 50))

    def draw_game(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞"""
        screen.fill(DARK_BLUE)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        progress = int((self.current_word_index / len(self.current_words)) * 20)
        bar = "‚ñà" * progress + "‚ñë" * (20 - progress)
        progress_text = font.render(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: [{bar}] {self.current_word_index}/{len(self.current_words)}", True, WHITE)
        screen.blit(progress_text, (20, 20))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_text = font.render(f"üéØ –°—á–µ—Ç: {self.score} | ‚ù§Ô∏è –ñ–∏–∑–Ω–∏: {self.lives} | üî• –°–µ—Ä–∏—è: {self.streak}", True, WHITE)
        screen.blit(stats_text, (WIDTH - stats_text.get_width() - 20, 20))
        
        # –¢–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ
        current_word_ru = self.current_words[self.current_word_index]
        current_category = self.word_categories[self.current_category]
        correct_answer = current_category["words"][current_word_ru]
        
        # –í–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if self.game_mode == "3" and self.current_image:
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            scaled_image = pygame.transform.scale(self.current_image, (600, 450))
            screen.blit(scaled_image, (WIDTH//2 - 300, HEIGHT//2 - 225))
        else:
            # –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞
            ru_text = large_font.render(current_word_ru.upper(), True, WHITE)
            screen.blit(ru_text, (WIDTH//2 - ru_text.get_width()//2, HEIGHT//2 - 100))
            
            ru_label = font.render("–†–£–°–°–ö–ò–ô", True, GREEN)
            screen.blit(ru_label, (WIDTH//2 - ru_label.get_width()//2, HEIGHT//2 - 150))
            
            # –°—Ç—Ä–µ–ª–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
            pygame.draw.polygon(screen, LIGHT_BLUE, [
                (WIDTH//2 - 20, HEIGHT//2 - 30),
                (WIDTH//2 + 20, HEIGHT//2 - 30),
                (WIDTH//2, HEIGHT//2 + 10)
            ])
            
            translate_label = font.render("–ü–ï–†–ï–í–û–î", True, LIGHT_BLUE)
            screen.blit(translate_label, (WIDTH//2 - translate_label.get_width()//2, HEIGHT//2 + 20))
            
            # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥
            en_text = large_font.render(correct_answer.upper(), True, LIGHT_BLUE)
            screen.blit(en_text, (WIDTH//2 - en_text.get_width()//2, HEIGHT//2 + 80))
            
            en_label = font.render("–ê–ù–ì–õ–ò–ô–°–ö–ò–ô", True, LIGHT_BLUE)
            screen.blit(en_label, (WIDTH//2 - en_label.get_width()//2, HEIGHT//2 + 150))
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        if self.recording:
            elapsed = time.time() - self.recording_start_time
            remaining = max(0, self.recording_duration - elapsed)
            instruction = font.render(f"üé§ –ó–∞–ø–∏—Å—å... –ì–æ–≤–æ—Ä–∏—Ç–µ! –û—Å—Ç–∞–ª–æ—Å—å: {remaining:.1f} —Å–µ–∫", True, RED)
        else:
            instruction = font.render("üé§ –ù–∞–∂–º–∏—Ç–µ –ü–†–û–ë–ï–õ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏", True, GOLD)
        
        screen.blit(instruction, (WIDTH//2 - instruction.get_width()//2, HEIGHT - 100))
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
        if self.last_result:
            result_color = GREEN if self.last_result["correct"] else RED
            result_text = font.render(self.last_result["message"], True, result_color)
            screen.blit(result_text, (WIDTH//2 - result_text.get_width()//2, HEIGHT - 150))

    def draw_result(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —ç–∫—Ä–∞–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        screen.fill(DARK_BLUE)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = title_font.render("üéä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ì–†–´", True, GOLD)
        screen.blit(title, (WIDTH//2 - title.get_width()//2, 50))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã
        stats_y = 120
        stats = [
            f"üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç: {self.score}",
            f"üìä –°–ª–æ–≤ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: {self.current_word_index}/{len(self.current_words)}",
            f"üî• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è: {self.max_streak}",
            f"üìö –ù–æ–≤—ã—Ö —Å–ª–æ–≤ –≤—ã—É—á–µ–Ω–æ: {len([w for w in self.current_words if w in self.session_stats['words_learned']])}"
        ]
        
        for stat in stats:
            stat_surface = font.render(stat, True, WHITE)
            screen.blit(stat_surface, (WIDTH//2 - stat_surface.get_width()//2, stats_y))
            stats_y += 40
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ —Å—á–µ—Ç–∞
        if self.score > self.session_stats["best_score"]:
            self.session_stats["best_score"] = self.score
            new_record = font.render("üèÖ –ù–û–í–´–ô –†–ï–ö–û–†–î!", True, GOLD)
            screen.blit(new_record, (WIDTH//2 - new_record.get_width()//2, stats_y))
            stats_y += 50
        
        # –ö–Ω–æ–ø–∫–∏
        restart_text = font.render("–ù–∞–∂–º–∏—Ç–µ R –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã", True, LIGHT_BLUE)
        menu_text = font.render("–ù–∞–∂–º–∏—Ç–µ M –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é", True, LIGHT_BLUE)
        
        screen.blit(restart_text, (WIDTH//2 - restart_text.get_width()//2, HEIGHT - 100))
        screen.blit(menu_text, (WIDTH//2 - menu_text.get_width()//2, HEIGHT - 60))

    def handle_menu_input(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤ –º–µ–Ω—é"""
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                return False
            
            # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if event.unicode in self.word_categories:
                self.selected_category = event.unicode
                
            # –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è
            if event.unicode in self.levels:
                self.selected_level = event.unicode
                
            # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
            if event.unicode in ["1", "2", "3"]:
                self.selected_mode = event.unicode
            
            # –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –≤—Å–µ—Ö –≤—ã–±–æ—Ä–æ–≤
            if hasattr(self, 'selected_category') and hasattr(self, 'selected_level') and hasattr(self, 'selected_mode'):
                self.start_game(self.selected_category, self.selected_level, self.selected_mode)
                # –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã
                delattr(self, 'selected_category')
                delattr(self, 'selected_level')
                delattr(self, 'selected_mode')
        
        return True

    def handle_game_input(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã"""
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                self.current_state = "menu"
                return True
            
            if event.key == pygame.K_SPACE and not self.recording and not self.waiting_for_input:
                # –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏
                self.recording = True
                self.recording_start_time = time.time()
                self.recording_duration = self.levels[self.current_level]["time_limit"]
                self.last_result = None
            
            if event.key == pygame.K_RETURN and self.waiting_for_input:
                # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É
                self.waiting_for_input = False
                self.current_word_index += 1
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞ –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
                if self.game_mode == "3" and self.current_word_index < len(self.current_words):
                    next_word = self.current_words[self.current_word_index]
                    english_translation = self.word_categories[self.current_category]["words"][next_word]
                    self.current_image = self.create_unified_translation_image(next_word, english_translation, self.current_category)
                
                if self.current_word_index >= len(self.current_words):
                    self.current_state = "result"
                    self.save_stats()
        
        return True

    def handle_result_input(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_r:
                # –ù–æ–≤–∞—è –∏–≥—Ä–∞ —Å —Ç–µ–º–∏ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                self.start_game(self.current_category, self.current_level, self.game_mode)
            elif event.key == pygame.K_m:
                self.current_state = "menu"
            elif event.key == pygame.K_ESCAPE:
                self.current_state = "menu"
        
        return True

    def update_game(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if self.current_state == "game" and self.recording:
            elapsed = time.time() - self.recording_start_time
            
            if elapsed >= self.recording_duration:
                # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                self.recording = False
                audio_file = self.record_audio(duration=self.recording_duration)
                user_answer = self.recognize_speech(audio_file)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
                current_word_ru = self.current_words[self.current_word_index]
                current_category = self.word_categories[self.current_category]
                correct_answer = current_category["words"][current_word_ru]
                
                if user_answer and user_answer == correct_answer:
                    self.streak += 1
                    self.max_streak = max(self.max_streak, self.streak)
                    base_points = 10
                    streak_bonus = min(self.streak - 1, 5) * 2
                    level_bonus = int(base_points * (self.levels[self.current_level]["multiplier"] - 1))
                    points_earned = base_points + streak_bonus + level_bonus
                    
                    self.score += points_earned
                    self.session_stats["words_learned"].add(current_word_ru)
                    
                    self.last_result = {
                        "correct": True,
                        "message": f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +{points_earned} –æ—á–∫–æ–≤"
                    }
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
                    self.check_achievements()
                else:
                    self.streak = 0
                    if self.game_mode == "1":  # –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
                        self.lives -= 1
                    
                    if user_answer:
                        self.last_result = {
                            "correct": False,
                            "message": f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –í—ã —Å–∫–∞–∑–∞–ª–∏: '{user_answer}'"
                        }
                    else:
                        self.last_result = {
                            "correct": False,
                            "message": f"‚ùå –†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü—Ä–∞–≤–∏–ª—å–Ω–æ: '{correct_answer}'"
                        }
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ
                    if self.game_mode == "1" and self.lives <= 0:
                        self.current_state = "result"
                        self.save_stats()
                        return
                
                self.waiting_for_input = True
                
                # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                if audio_file and os.path.exists(audio_file):
                    os.unlink(audio_file)

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª"""
        running = True
        clock = pygame.time.Clock()
        
        while running:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
                if self.current_state == "menu":
                    running = self.handle_menu_input(event)
                elif self.current_state == "game":
                    running = self.handle_game_input(event)
                elif self.current_state == "result":
                    running = self.handle_result_input(event)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã
            self.update_game()
            
            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞
            if self.current_state == "menu":
                self.draw_menu()
            elif self.current_state == "game":
                self.draw_game()
            elif self.current_state == "result":
                self.draw_result()
            
            pygame.display.flip()
            clock.tick(60)
        
        pygame.quit()
        sys.exit()

# –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
if __name__ == "__main__":
    game = SpeakingGame()
    game.run()