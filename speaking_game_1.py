import speech_recognition as sr
import sounddevice as sd
from scipy.io.wavfile import write
import tempfile
import os
import random
import time
import sys
import json
from datetime import datetime
import wave
import numpy as np

class SpeakingGame:
    def __init__(self):
        self.recognizer = sr.Recognizer()
        self.score = 0
        self.lives = 3
        self.streak = 0
        self.max_streak = 0
        self.session_stats = {
            "games_played": 0,
            "total_score": 0,
            "best_score": 0,
            "words_learned": set()
        }
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.load_stats()
        
        self.levels = {
            "1": {"name": "–ù–æ–≤–∏—á–æ–∫", "words": 5, "time_limit": 10, "multiplier": 1},
            "2": {"name": "–°—Ä–µ–¥–Ω–∏–π", "words": 8, "time_limit": 8, "multiplier": 1.5},
            "3": {"name": "–≠–∫—Å–ø–µ—Ä—Ç", "words": 12, "time_limit": 5, "multiplier": 2}
        }
        
        # –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–±–æ—Ä—ã —Å–ª–æ–≤
        self.word_categories = {
            "1": {"name": "–ë–∞–∑–æ–≤—ã–µ —Å–ª–æ–≤–∞", "words": {
                "–∫–æ—Ç": "cat", "—Å–æ–±–∞–∫–∞": "dog", "–¥–æ–º": "house", "—Å–æ–ª–Ω—Ü–µ": "sun",
                "–≤–æ–¥–∞": "water", "–∫–Ω–∏–≥–∞": "book", "—Å—Ç–æ–ª": "table", "–æ–∫–Ω–æ": "window",
                "—è–±–ª–æ–∫–æ": "apple", "–º–∞—à–∏–Ω–∞": "car", "—Ä—É–∫–∞": "hand", "–Ω–æ–≥–∞": "leg"
            }},
            "2": {"name": "–ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏", "words": {
                "—Ö–ª–µ–±": "bread", "–º–æ–ª–æ–∫–æ": "milk", "—á–∞–π": "tea", "–∫–æ—Ñ–µ": "coffee",
                "—Å—É–ø": "soup", "—Å—ã—Ä": "cheese", "–º—è—Å–æ": "meat", "—Ä—ã–±–∞": "fish",
                "—Ñ—Ä—É–∫—Ç—ã": "fruits", "–æ–≤–æ—â–∏": "vegetables", "—Å–∞–ª–∞—Ç": "salad"
            }},
            "3": {"name": "–ü—Ä–∏—Ä–æ–¥–∞ –∏ –∂–∏–≤–æ—Ç–Ω—ã–µ", "words": {
                "–¥–µ—Ä–µ–≤–æ": "tree", "—Ü–≤–µ—Ç–æ–∫": "flower", "–ø—Ç–∏—Ü–∞": "bird", "–ª–µ—Å": "forest",
                "—Ä–µ–∫–∞": "river", "–º–æ—Ä–µ": "sea", "–≥–æ—Ä—ã": "mountains", "–Ω–µ–±–æ": "sky",
                "–∑–≤–µ–∑–¥–∞": "star", "–ª—É–Ω–∞": "moon", "–ø–æ–≥–æ–¥–∞": "weather"
            }},
            "4": {"name": "–ì–æ—Ä–æ–¥ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "words": {
                "–≥–æ—Ä–æ–¥": "city", "—É–ª–∏—Ü–∞": "street", "–ø–∞—Ä–∫": "park", "–º–∞–≥–∞–∑–∏–Ω": "shop",
                "—à–∫–æ–ª–∞": "school", "–±–æ–ª—å–Ω–∏—Ü–∞": "hospital", "–∞–≤—Ç–æ–±—É—Å": "bus",
                "–ø–æ–µ–∑–¥": "train", "—Å–∞–º–æ–ª–µ—Ç": "airplane", "–≤–µ–ª–æ—Å–∏–ø–µ–¥": "bicycle"
            }}
        }
        
        # –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        self.achievements = {
            "first_blood": {"name": "–ü–µ—Ä–≤–∞—è –∫—Ä–æ–≤—å", "desc": "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—É—é –∏–≥—Ä—É", "earned": False},
            "streak_master": {"name": "–ú–∞—Å—Ç–µ—Ä —Å–µ—Ä–∏–∏", "desc": "–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Å–µ—Ä–∏–∏ –∏–∑ 5 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤", "earned": False},
            "perfectionist": {"name": "–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç", "desc": "–ü—Ä–æ–π–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –±–µ–∑ –æ—à–∏–±–æ–∫", "earned": False},
            "vocabulary": {"name": "–°–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å", "desc": "–í—ã—É—á–∏—Ç–µ 20 —Å–ª–æ–≤", "earned": False},
            "speed_demon": {"name": "–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –¥–µ–º–æ–Ω", "desc": "–ü—Ä–æ–π–¥–∏—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "earned": False}
        }

    def load_stats(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open("game_stats.json", "r", encoding = "utf-8") as f:
                self.session_stats = json.load(f)
                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ set –æ–±—Ä–∞—Ç–Ω–æ –∏–∑ list
                self.session_stats["words_learned"] = set(self.session_stats.get("words_learned", []))
        except FileNotFoundError:
            pass

    def save_stats(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–∞–π–ª"""
        try:
            stats_to_save = self.session_stats.copy()
            stats_to_save["words_learned"] = list(stats_to_save["words_learned"])
            with open("game_stats.json", "w", encoding = "utf-8") as f:
                json.dump(stats_to_save, f, ensure_ascii = False, indent = 2)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")

    def analyze_pronunciation(self, audio_file, correct_word):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            with wave.open(audio_file, 'rb') as wav_file:
                frames = wav_file.getnframes()
                rate = wav_file.getframerate()
                duration = frames / float(rate)
                
                # –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ
                signal = wav_file.readframes(frames)
                audio_data = np.frombuffer(signal, dtype = np.int16)
                
                # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
                volume = np.sqrt(np.mean(audio_data**2))
                
                feedback = []
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if duration < 0.5:
                    feedback.append("üó£Ô∏è –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ")
                elif duration > 3.0:
                    feedback.append("üó£Ô∏è –°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ")
                else:
                    feedback.append("üó£Ô∏è –•–æ—Ä–æ—à–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
                if volume < 1000:
                    feedback.append("üîà –°–ª–∏—à–∫–æ–º —Ç–∏—Ö–æ")
                elif volume > 10000:
                    feedback.append("üîä –°–ª–∏—à–∫–æ–º –≥—Ä–æ–º–∫–æ")
                else:
                    feedback.append("üîä –•–æ—Ä–æ—à–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å")
                
                return feedback
        except:
            return ["üîß –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"]

    def check_achievements(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–¥–∞—á–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        new_achievements = []
        
        # –ü–µ—Ä–≤–∞—è –∏–≥—Ä–∞
        if not self.achievements["first_blood"]["earned"] and self.session_stats["games_played"] > 0:
            self.achievements["first_blood"]["earned"] = True
            new_achievements.append("first_blood")
        
        # –°–µ—Ä–∏—è –∏–∑ 5 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        if not self.achievements["streak_master"]["earned"] and self.streak >= 5:
            self.achievements["streak_master"]["earned"] = True
            new_achievements.append("streak_master")
        
        # 20 –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
        if not self.achievements["vocabulary"]["earned"] and len(self.session_stats["words_learned"]) >= 20:
            self.achievements["vocabulary"]["earned"] = True
            new_achievements.append("vocabulary")
        
        return new_achievements

    def show_achievements(self, new_ones = None):
        """–ü–æ–∫–∞–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        print(f"\nüèÜ –î–û–°–¢–ò–ñ–ï–ù–ò–Ø ({sum(1 for a in self.achievements.values() if a['earned'])}/{len(self.achievements)})")
        print("=" * 50)
        
        for achievement in self.achievements.values():
            status = "‚úÖ" if achievement["earned"] else "‚ùå"
            print(f"{status} {achievement['name']}: {achievement['desc']}")
        
        if new_ones:
            print(f"\nüéâ –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!")
            for ach_id in new_ones:
                ach = self.achievements[ach_id]
                print(f"   üéä {ach['name']}: {ach['desc']}")

    def record_audio(self, duration = 5, sample_rate = 44100):
        """–ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
        print("\nüé§ –ó–∞–ø–∏—Å—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è... –ì–æ–≤–æ—Ä–∏—Ç–µ!")
        try:
            audio_data = sd.rec(int(duration * sample_rate), samplerate = sample_rate, channels = 1, dtype = 'int16')
            sd.wait()
            
            with tempfile.NamedTemporaryFile(suffix = '.wav', delete = False) as tmp_file:
                write(tmp_file.name, sample_rate, audio_data)
                return tmp_file.name
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ: {e}")
            return None

    def recognize_speech(self, audio_file):
        """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∏–∑ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞"""
        if not audio_file:
            return None
            
        try:
            with sr.AudioFile(audio_file) as source:
                self.recognizer.adjust_for_ambient_noise(source, duration = 0.5)
                audio = self.recognizer.record(source)
                text = self.recognizer.recognize_google(audio, language = 'en-US')
                return text.lower()
        except sr.UnknownValueError:
            return None
        except sr.RequestError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
            return None

    def get_word_list(self, category_id, level):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —É—Ä–æ–≤–Ω—è"""
        category = self.word_categories[category_id]
        all_words = list(category["words"].keys())
        return random.sample(all_words, self.levels[level]["words"])

    def show_ascii_art(self, state):
        """–ü–æ–∫–∞–∑ ASCII –≥—Ä–∞—Ñ–∏–∫–∏"""
        arts = {
            "welcome": r"""
                ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
                ‚ïë           –ì–û–í–û–†–ò –ü–†–ê–í–ò–õ–¨–ù–û           ‚ïë
                ‚ïë           SPEAK CORRECTLY            ‚ïë
                ‚ïë      üéØ –£—á–∏—Å—å. –ì–æ–≤–æ—Ä–∏. –ü–æ–±–µ–∂–¥–∞–π! üéØ ‚ïë
                ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
            """,
            "correct": r"""
            üéâ –ü–†–ê–í–ò–õ–¨–ù–û! üéâ
               \
                \
                 üëè
                /|\
                / \
            """,
            "wrong": r"""
            ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û 
               \
                \
                 üòû
                /|\
                / \
            """,
            "game_over": r"""
                ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
                ‚ïë         –ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê        ‚ïë
                ‚ïë          GAME OVER           ‚ïë
                ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
            """,
            "microphone": r"""
              üé§
             ‚îå‚îÄ‚îÄ‚îÄ‚îê
             ‚îÇ   ‚îÇ
             ‚îî‚îÄ‚îÄ‚îÄ‚îò
              ‚îÇ ‚îÇ
              ‚îÇ ‚îÇ
            """
        }
        print(arts.get(state, ""))

    def show_progress(self, current, total, score, lives, streak):
        """–ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–≥—Ä—ã"""
        progress = int((current / total) * 20)
        bar = "‚ñà" * progress + "‚ñë" * (20 - progress)
        print(f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: [{bar}] {current}/{total}")
        print(f"üéØ –°—á–µ—Ç: {score} | ‚ù§Ô∏è  –ñ–∏–∑–Ω–∏: {'‚ô• ' * lives} | üî• –°–µ—Ä–∏—è: {streak}")

    def show_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞"""
        print(f"\nüìà –í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("=" * 40)
        print(f"üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {self.session_stats['games_played']}")
        print(f"üèÜ –õ—É—á—à–∏–π —Å—á–µ—Ç: {self.session_stats['best_score']}")
        print(f"üìö –°–ª–æ–≤ –≤—ã—É—á–µ–Ω–æ: {len(self.session_stats['words_learned'])}")
        print(f"üíé –ú–∞–∫—Å. —Å–µ—Ä–∏—è: {self.max_streak}")

    def choose_category(self):
        """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–æ–≤"""
        print(f"\nüìö –í–´–ë–ï–†–ò–¢–ï –ö–ê–¢–ï–ì–û–†–ò–Æ –°–õ–û–í:")
        for key, category in self.word_categories.items():
            print(f"   {key}. {category['name']} ({len(category['words'])} —Å–ª–æ–≤)")
        
        while True:
            choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-4): ").strip()
            if choice in self.word_categories:
                return choice
            print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 1 –¥–æ 4")

    def choose_mode(self):
        """–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã"""
        print(f"\nüéÆ –í–´–ë–ï–†–ò–¢–ï –†–ï–ñ–ò–ú –ò–ì–†–´:")
        print("   1. üéØ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º (—Å –∂–∏–∑–Ω—è–º–∏)")
        print("   2. üèãÔ∏è  –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π —Ä–µ–∂–∏–º (–±–µ–∑ –∂–∏–∑–Ω–µ–π)")
        
        while True:
            choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-2): ").strip()
            if choice in ["1", "2"]:
                return choice
            print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1 –∏–ª–∏ 2")

    def play_game(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª"""
        self.show_ascii_art("welcome")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.session_stats["games_played"] += 1
        
        # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
        game_mode = self.choose_mode()
        is_training = game_mode == "2"
        
        if is_training:
            print("\nüèãÔ∏è  –¢–†–ï–ù–ê–ñ–ï–†: –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!")
            self.lives = 999  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –∂–∏–∑–Ω–∏ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
        
        # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_id = self.choose_category()
        category = self.word_categories[category_id]
        
        # –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        print(f"\nüéöÔ∏è  –í–´–ë–ï–†–ò–¢–ï –£–†–û–í–ï–ù–¨ –°–õ–û–ñ–ù–û–°–¢–ò:")
        for key, level in self.levels.items():
            print(f"   {key}. {level['name']} ({level['words']} —Å–ª–æ–≤, –≤—Ä–µ–º—è: {level['time_limit']} —Å–µ–∫)")
        
        while True:
            level_choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
            if level_choice in self.levels:
                break
            print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1, 2 –∏–ª–∏ 3")
        
        current_level = self.levels[level_choice]
        words = self.get_word_list(category_id, level_choice)
        
        print(f"\nüöÄ –ù–ê–ß–ò–ù–ê–ï–ú!")
        print(f"üìö –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category['name']}")
        print(f"üéØ –£—Ä–æ–≤–µ–Ω—å: {current_level['name']}")
        print(f"üî§ –°–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: {len(words)}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç: {current_level['time_limit']} —Å–µ–∫—É–Ω–¥")
        
        if not is_training:
            print("‚ù§Ô∏è  –ñ–∏–∑–Ω–∏: " + "‚ô• " * self.lives)
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å...")
        
        # –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
        perfect_game = True
        for i, word_ru in enumerate(words, 1):
            print(f"\n{'='*50}")
            self.show_progress(i, len(words), self.score, self.lives if not is_training else 999, self.streak)
            print(f"\nüî§ –†—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ: {word_ru.upper()}")
            print(f"‚è±Ô∏è  –£ –≤–∞—Å {current_level['time_limit']} —Å–µ–∫—É–Ω–¥...")
            
            correct_answer = category["words"][word_ru]
            self.show_ascii_art("microphone")
            
            # –ó–∞–ø–∏—Å—å –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
            audio_file = self.record_audio(duration=current_level['time_limit'])
            user_answer = self.recognize_speech(audio_file)
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
            pronunciation_feedback = self.analyze_pronunciation(audio_file, correct_answer) if audio_file else []
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
            if user_answer and user_answer == correct_answer:
                self.streak += 1
                self.max_streak = max(self.max_streak, self.streak)
                base_points = 10
                streak_bonus = min(self.streak - 1, 5) * 2  # –ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é –¥–æ +10
                level_bonus = int(base_points * (current_level["multiplier"] - 1))
                points_earned = base_points + streak_bonus + level_bonus
                
                self.score += points_earned
                self.session_stats["words_learned"].add(word_ru)
                
                self.show_ascii_art("correct")
                print(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã —Å–∫–∞–∑–∞–ª–∏: '{user_answer}'")
                print(f"üéØ +{points_earned} –æ—á–∫–æ–≤! (10 –±–∞–∑–æ–≤—ã—Ö + {streak_bonus} –∑–∞ —Å–µ—Ä–∏—é + {level_bonus} –∑–∞ —É—Ä–æ–≤–µ–Ω—å)")
                print(f"üíé –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: {self.score} | üî• –°–µ—Ä–∏—è: {self.streak}")
                
                # –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–¥–±–µ–∫ –ø–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—é
                for feedback in pronunciation_feedback:
                    print(f"   {feedback}")
                    
            else:
                self.streak = 0
                perfect_game = False
                
                if not is_training:
                    self.lives -= 1
                
                self.show_ascii_art("wrong")
                if user_answer:
                    print(f"‚ùå –í—ã —Å–∫–∞–∑–∞–ª–∏: '{user_answer}'")
                else:
                    print("‚ùå –†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π")
                print(f"üí° –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: '{correct_answer}'")
                
                # –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–¥–±–µ–∫ –ø–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—é –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                for feedback in pronunciation_feedback:
                    print(f"   {feedback}")
                
                if not is_training:
                    print(f"‚ù§Ô∏è  –û—Å—Ç–∞–ª–æ—Å—å –∂–∏–∑–Ω–µ–π: {self.lives}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ game over (—Ç–æ–ª—å–∫–æ –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ)
                if not is_training and self.lives <= 0:
                    self.show_ascii_art("game_over")
                    print(f"üíî –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í–∞—à —Å—á–µ—Ç: {self.score}")
                    break
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏
            if i < len(words) and (is_training or self.lives > 0):
                print("\n–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É...")
                for countdown in range(2, 0, -1):
                    print(f"‚è∞ {countdown}...", end = " ")
                    sys.stdout.flush()
                    time.sleep(1)
                print()
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
        if is_training or self.lives > 0:
            print(f"\nüéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ {category['name']}!")
            print(f"üèÜ –í–∞—à —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç: {self.score}")
            
            # –ë–æ–Ω—É—Å—ã
            if perfect_game and not is_training:
                perfect_bonus = 50
                self.score += perfect_bonus
                print(f"‚≠ê –ë–æ–Ω—É—Å –∑–∞ –∏–¥–µ–∞–ª—å–Ω—É—é –∏–≥—Ä—É: +{perfect_bonus} –æ—á–∫–æ–≤!")
            
            if not is_training:
                lives_bonus = self.lives * int(level_choice) * 5
                self.score += lives_bonus
                print(f"üéÅ –ë–æ–Ω—É—Å –∑–∞ –∂–∏–∑–Ω–∏: +{lives_bonus} –æ—á–∫–æ–≤")
            
            print(f"üíé –ò—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç: {self.score}")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ —Å—á–µ—Ç–∞
            if self.score > self.session_stats["best_score"]:
                self.session_stats["best_score"] = self.score
                print("üèÖ –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        new_achievements = self.check_achievements()
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.show_stats()
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        self.show_achievements(new_achievements)
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.save_stats()
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑
        print(f"\n{'=' * 50}")
        play_again = input("\nüéÆ –•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑? (–¥–∞/–Ω–µ—Ç): ").lower()
        if play_again in ['–¥–∞', '–¥', 'yes', 'y', '1']:
            self.score = 0
            self.streak = 0
            self.lives = 3
            self.play_game()
        else:
            print("\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –î–æ –≤—Å—Ç—Ä–µ—á–∏! üëã")
            print("–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")

# –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
if __name__ == "__main__":
    try:
        game = SpeakingGame()
        game.play_game()
    except KeyboardInterrupt:
        print("\n\n–ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
        print("2. –ù–∞–ª–∏—á–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞")
        print("3. –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É")